Service : Personnage

Use : Objet, Bloc

Types : String, int, boolean, TRESOR

Observators :
	const nom : [Personnage] -> string 
	const largeur : [Personnage] -> int 
	const hauteur : [Personnage] -> int 
	const profondeur: [Personnage] -> int
	const force : [Personnage] -> int 
	pointsDeVie : [Personnage] -> int 
	sommeArgent :[Personnage] -> int
	getX : [Personnage] -> int
	getY : [Personnage] -> int
	getZ : [Personnage] -> int
	estVaincu : [Personnage] -> boolean
	estEquipe : [Personnage] -> boolean
	laChoseEquipee : [Personnage] -> [Objet]

Constructors :
	init : String * int * int * int * int * int * int * int * int 
			-> [Personnage]
		pre init(nom, largeur, hauteur, profondeur, force, vie, x, y, z)
			require 
				nom <> "" 
				&& largeur > 0 
				&& hauteur > 0 
				&& profondeur > 0 
				&& 0 < force < vie 

Operators :
	retrait : [Personnage] * int -> [Personnage]
		pre retrait(P,s)
			require 
				!estVaincu(P) 
				&& s > 0

	depot : [Personnage] * int -> [Perssonnage]
		pre depot(P,s)
			require 
				!estVaincu(P)
				&& s > 0

	depotArgent : [Personnage] * int -> [Personnage]
		pre depotArgent(P,s)
			require 
				s > 0 
				&& !estVaincu(P)

	retraitArgent : [Personnage] * int -> [Personnage]
		pre retraitArgent(P,s)
			require 
				s > 0 
				&& sommeArgent(P) >= s
				&& !estVaincu(P)

	ramasser : [Personnage] * [Bloc] -> [Perosnnage]
		pre ramasser(P,b) 
			require 
				!estEquipe(P) 
				&& Objet::isEquipable(Bloc::getObjet(b)) 
				&& !estVaincu(P)

	jeter : [Personnage] * [Bloc] -> [Personnage]
		pre jeter(P,b)
			require 
				estEquipe(P)

	setX : [Personnage] * int -> [Personnage]

	setY : [Personnage] * int -> [Personnage]

	setZ : [Personnage] * int -> [Personnage]


Observations : 
	[invariants]
		estVaincu(P) = pointsDeVie(P) <= 0 
		sommeArgent(P) >= 0
		estEquipe(P) = Objet::isEquipable(laChoseEquipee(P))
		

	[init]
		nom(init(n,l,h,p,f,pv,x,y,z)) = n 
		largeur(init(n,l,h,p,f,pv,x,y,z)) = l 
		hauteur(init(n,l,h,p,f,pv,x,y,z)) = h
		profondeur(init(n,l,h,p,f,pv,x,y,z)) = p 
		force(init(n,l,h,p,f,pv,x,y,z)) = f 
		pointsDeVie(init(n,l,h,p,f,pv,x,y,z)) = pv
		laChoseEquipee(init(n,l,h,p,f,pv,x,y,z)) = null
		sommeArgent(init(n,l,h,p,f,pv,x,y,z)) = 0
		getX(init(n,l,h,p,f,pv,x,y,z)) = x
		getY(init(n,l,h,p,f,pv,x,y,z)) = y
		getZ(init(n,l,h,p,f,pv,x,y,z)) = z


	[depot] 
		pointsDeVie(depot(P,s)) = pointsDeVie(P) + s

	[retrait] 
		pointsDeVie(retrait(P,s)) = pointsDeVie(P) - s

	[depotArgent] 
		sommeArgent(depotArgent(P,s)) = sommeArgent(P) + s

	[retraitArgent] 
		sommeArgent(retraitArgent(P,s)) = sommeArgent(P) - s

	[ramasser]
		laChoseEquipee(ramasser(P,b)) = Bloc::getObjet(b)
		Bloc::getObjet(ramasser(P,b)) = null

	[jeter]
		laChoseEquipee(jeter(P)) = null
		estEquipee(jeter(P)) = false
		Bloc::getObjet(jeter(P,b)) = laChoseEquipee(P)

	[setX]
		getX(setX(P,x)) = x

	[setY]
		getY(setY(P,y)) = y

	[setZ]
		getZ(setZ(P,z)) = z